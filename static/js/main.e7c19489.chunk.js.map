{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MovieGenre","_ref2","genre","react_default","a","createElement","className","MoviePoster","_ref3","poster","alt","src","title","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","console","log","_renderMovies","movie","src_Movie","title_english","medium_cover_image","id","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA+CA,SAASA,EAATC,GAA+B,IAATC,EAASD,EAATC,MACrB,OACCC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAeJ,GAIjC,SAASK,EAATC,GAAsC,IAAfC,EAAeD,EAAfC,OAAQC,EAAOF,EAAPE,IAC9B,OACCP,EAAAC,EAAAC,cAAA,OAAKM,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKJ,UAAU,kBA+BrCO,MAhEf,SAAAC,GAAoD,IAAnCF,EAAmCE,EAAnCF,MAAOH,EAA4BK,EAA5BL,OAAQM,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,SACvC,OACCb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACdH,EAAAC,EAAAC,cAACE,EAAD,CAAaE,OAAQA,EAAQC,IAAKE,KAEnCT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACdH,EAAAC,EAAAC,cAAA,UAAKO,GACLT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbS,EAAOE,IAAI,SAACf,EAAOgB,GAAR,OAAkBf,EAAAC,EAAAC,cAACL,EAAD,CAAYE,MAAOA,EAAOiB,IAAKD,OAE9Df,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACdH,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CACeiB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBC4CbC,6MA3EXC,MAAQ,KAmCRC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAA3B,EAAA4B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACYC,EAAKC,WADjB,OACHP,EADGG,EAAAK,KAGTF,EAAKG,SAAS,CACVT,WAJK,wBAAAG,EAAAO,SAAAX,QASbQ,SAAW,WACP,OAAOI,MAAM,yDACRC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKf,SACvBgB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAGlCG,cAAgB,WAYZ,OAXed,EAAKT,MAAMG,OAAOb,IAAI,SAAAkC,GACjC,OACIhD,EAAAC,EAAAC,cAAC+C,EAAD,CACAxC,MAAUuC,EAAME,cAChB5C,OAAW0C,EAAMG,mBACjBvC,OAAUoC,EAAMpC,OAChBI,IAAQgC,EAAMI,GACdvC,SAAYmC,EAAMnC,iGA/B1BwC,KAAK5B,8CAqCA,IACEE,EAAU0B,KAAK7B,MAAfG,OACP,OACI3B,EAAAC,EAAAC,cAAA,OAAKC,UAAWwB,EAAS,MAAO,gBAC3B0B,KAAK7B,MAAMG,OAAS0B,KAAKN,gBAAkB,kBAzE1CO,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.e7c19489.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport LinesEllipsis from 'react-lines-ellipsis'\nimport './Movie.css';\n\n/*class Movie extends Component {\n\n\tstatic propTypes = {\n\t\ttitle: PropTypes.string.isRequired,\n\t\tposter: PropTypes.string.isRequired\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>{this.props.title}</p>\n\t\t\t\t<MoviePoster poster={this.props.poster}></MoviePoster>\n\t\t\t</div>\n\t\t);\n\t}\n\n}*/\n\nfunction Movie({ title, poster, genres, synopsis }) {\n\treturn (\n\t\t<div className=\"movie\">\n\t\t\t<div className=\"movie__column\">\n\t\t\t\t<MoviePoster poster={poster} alt={title} />\n\t\t\t</div>\n\t\t\t<div className=\"movie__column\">\n\t\t\t\t<h1>{title}</h1>\n\t\t\t\t<div className=\"movie__genres\">\n\t\t\t\t\t{genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"movie__synopsis\">\n\t\t\t\t\t<LinesEllipsis\n                    text={synopsis}\n                    maxLine='5'\n                    ellipsis='...'\n                    trimRight\n                    basedOn='letters'\n                    />   \n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nfunction MovieGenre({ genre }) {\n\treturn (\n\t\t<span className=\"moive_genre\">{genre}</span>\n\t)\n}\n\nfunction MoviePoster({ poster, alt }) {\n\treturn (\n\t\t<img src={poster} alt={alt} title={alt} className=\"movie__poster\" />\n\t)\n}\n\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired\n}\n\nMoviePoster.propTypes = {\n    poster: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired\n}\n\nMovieGenre.propTypes ={\n    genre: PropTypes.string.isRequired\n}\n\n// class MoviePoster extends Component {\n// \tstatic propTypes = {\n// \t\tposter: PropTypes.string.isRequired\n// \t}\n// \trender() {\n// \t\treturn (\n// \t\t\t<img src={process.env.PUBLIC_URL+this.props.poster} />\n// \t\t)\n// \t}\n// }\n\nexport default Movie;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Movie from \"./Movie\";\n\nclass App extends Component {\n    //Render : componentWillMount() ->  render() -> componentDidMount()\n    // Update : componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render() -> componentDidUpdate()\n\n    state = {};\n    componentDidMount() {\n        /*setTimeout(() => {\n            this.setState({\n                movies: [{\n                        title: \"Matrix\",\n                        poster: \"/images/img01.jpg\"\n                    },\n                    {\n                        title: \"Full Metal Jacket\",\n                        poster: \"/images/img02.jpg\"\n                    },\n                    {\n                        title: \"Oldboy\",\n                        poster: \"/images/img03.jpg\"\n                    },\n                    {\n                        title: \"Star Wars\",\n                        poster: \"/images/img04.jpg\"\n                    },\n                    {\n                        title: \"Ant's Man\",\n                        poster: \"/images/img05.jpg\"\n                    }\n                ]\n            });\n        }, 3000);*/\n\n        this._getMovies();\n\n        /*.catch( function(error){\n            console.log(error)\n        })*/\n    }\n\n    _getMovies = async () => {\n        const movies = await this._callApi()\n        // console.log(movies)\n        this.setState({\n            movies\n            // movies : movies\n        })\n    }\n\n    _callApi = () => {\n        return fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')\n            .then(response => response.json())\n            .then(json => json.data.movies)\n            .catch(err => console.log(err))\n    }\n\n    _renderMovies = () => {\n        const movies = this.state.movies.map(movie => {\n            return (\n                <Movie \n                title = { movie.title_english }\n                poster = { movie.medium_cover_image }\n                genres = {movie.genres}\n                key = { movie.id } \n                synopsis = {movie.synopsis}\n                />\n            );\n        })\n        return movies\n    }\n    render() {\n        const {movies} = this.state;\n        return (\n            <div className={movies ? \"App\" :\"App--loading\"}>\n                {this.state.movies ? this._renderMovies() : 'Loading'}\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}